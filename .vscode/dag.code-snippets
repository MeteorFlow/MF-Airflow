{
  "dag_template": {
    "scope": "python",
    "prefix": "dag",
    "body": [
      "import pendulum",
      "",
      "from airflow import DAG",
      "from rs_airflow import dynamic_func",
      "from rs_airflow.notification.email import RsEmailNotification",
      "",
      "env, tenant = dynamic_func.extract_env(__file__)",
      "env_tenant = f\"{env}_{tenant}\"",
      "",
      "__version__ = '0.0.1'",
      "",
      "with DAG(",
      "    dag_id=f'{env_tenant}',",
      "    schedule=,",
      "    start_date=pendulum.datetime(),",
      "    tags=[env_tenant],",
      "    default_args={'on_failure_callback': RsEmailNotification()},",
      ") as dag:",
      "    pass",
      "",
      "if __name__ == '__main__':",
      "    dag.test()"
    ]
  },
  "dynamic_dag_template": {
    "scope": "python",
    "prefix": "dynamic_dag",
    "body": [
      "import json",
      "import pathlib",
      "from typing import Any",
      "",
      "import pendulum",
      "",
      "from airflow.decorators import dag",
      "from airflow.utils.dag_parsing_context import get_parsing_context",
      "from rs_airflow import dynamic_func",
      "",
      "env, tenant = dynamic_func.extract_env(__file__)",
      "env_tenant = f\"{env}_{tenant}\"",
      "",
      "__version__ = \"0.0.1\"",
      "",
      "CONFIG_PATH = pathlib.Path(__file__).parent / \"configs\"",
      "",
      "",
      "def generate_dag(dag_id: str, tenant_config: dict[str, Any]):",
      "    start_date = pendulum.parse(tenant_config[\"start_date\"], tz=tenant_config[\"timezone\"])",
      "    if not isinstance(start_date, pendulum.DateTime):",
      "        raise ValueError(\"Failed to parse start date as DateTime: %s\", tenant_config[\"start_date\"])",
      "",
      "    end_date = tenant_config[\"end_date\"]",
      "    if end_date:",
      "        end_date = pendulum.parse(end_date, tz=tenant_config[\"timezone\"])",
      "        if not isinstance(end_date, pendulum.DateTime):",
      "            raise ValueError(\"Failed to parse start date as DateTime: %s\", end_date)",
      "",
      "    extra_dag_confs = tenant_config[\"dag_extra_confs\"] if \"dag_extra_confs\" in tenant_config else {}",
      "",
      "    @dag(",
      "        dag_id=dag_id,",
      "        schedule=tenant_config[\"schedule\"],",
      "        start_date=start_date,",
      "        end_date=end_date,",
      "        params=tenant_config,",
      "        tags=[env_tenant],",
      "        **extra_dag_confs,",
      "    )",
      "    def etl_dag():",
      "        pass",
      "",
      "    return etl_dag",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    # Debugging mode",
      "    with open(CONFIG_PATH / \"\", \"r\") as config_file:",
      "        tenant_config = json.load(config_file)",
      "",
      "        dag_id = f\"{env_tenant}_{tenant_config['tenant']}_\"",
      "        testing_dag = generate_dag(dag_id, tenant_config)",
      "        testing_dag().test(execution_date=pendulum.datetime())",
      "",
      "else:",
      "    # Normal execution mode",
      "    current_dag_id = get_parsing_context().dag_id",
      "",
      "    for config_filename in CONFIG_PATH.glob(\"*.json\"):",
      "        with open(config_filename, \"r\") as config_file:",
      "            tenant_config = json.load(config_file)",
      "",
      "            dag_id = f\"{env_tenant}_{tenant_config['tenant']}_\"",
      "            if current_dag_id is not None and current_dag_id != dag_id:",
      "                continue",
      "",
      "            tenant_dag = generate_dag(dag_id, tenant_config)",
      "            tenant_dag()"
    ],
    "isFileTemplate": true
  }
}
